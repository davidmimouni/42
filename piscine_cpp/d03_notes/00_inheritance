#include <string>

class Cat {

private:

  int   _numberOfLegs;

public:

  Cat()
  Cat(Cat const &);
  Cat& operator=(Cat const &);
  ~Cat();

  void  run(int distance);

  void  scornSomeone(std::string const & target);

};

class Pony {

private:

  int   _numberOfLegs;

public:

  Pony()
  Pony(Pony const &);
  Pony& operator=(Pony const &);
  ~Pony();

  void  run(int distance);

  void  doMagic(std::string const & target);

};

// INHERITANCE

class Animal {

private:

  int   _numberOfLegs;

public:

  Animal()
  Animal(Animal const &);
  Animal& operator=(Animal const &);
  ~Animal();

  void  run(int distance);

};

class Cat : public Animal {

public:

  Cat()
  Cat(Cat const &);
  Cat& operator=(Cat const &);
  ~Cat();

  void  scornSomeone(std::string const & target);

};


class Pony : public Animal {

public:

  Pony()
  Pony(Pony const &);
  Pony& operator=(Pony const &);
  ~Pony();

  void  doMagic(std::string const & target);
  void  run(int distance); // possible d overider

};


//PROTECTED

class Quadruped {  // can access name, run() and legs

  private:
    std::string       name; // Only accessible from a Quadruped object

  protected:
    Leg               legs[4]; // Accessible from a Quadruped or derived object

  public:
    void              run(); // Accessible from wherever

};

class Dog : public Quadruped {  // can access run and legs

};

int main() // can only access run()



// NIVEAU D ENCAPSULATION D HERITAGE
// HERITAGE MULTIPLE
// HERITAGE EN DIAMANT
