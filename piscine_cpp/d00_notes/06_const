#06_const

// Sample.class.hpp

#ifndef SAMPLE_CLASS_H
# define SAMPLE_CLASS_H

class Sample {

public:

  float const  pi;
  int          qd;

  Sample( float const f );
  ~Sample( void );

  void   bar( void ) const;
  // const at the end means that the member function will never modify the instance of the class
};

#endif

// Sample.class.cpp

#include <iostream>
#include "Sample.class.hpp"

Sample::Sample( float const f ) : pi( f ), qd( 42 ) {

  std::cout << "Constructor called" << std::endl;
  return;
}

Sample::~Sample( void ) {

  std::cout << "Destructor called" << std::endl;
  return;
}

void    Sample::bar( void ) const {
// const at the end means that the member function will never modify the instance

  std::cout << "this->pi" << this->pi << std::endl;
  std::cout << "this->qd" << this->qd << std::endl;

}
