#10_comparisons


// Sample.class.hpp

#ifndef SAMPLE_CLASS_H
# define SAMPLE_CLASS_H

class Sample {

public:

  Sample( int v );
  ~Sample( void );

  int   getFoo( void ) const;
  int   compare( Sample * other ) const;

private:

  int   _foo;

};

#endif


// Sample.class.cpp

Sample::Sample( int v ) : _foo(v) {

  std::cout << "Constructor called" << std::endl;
  return;
}

Sample::~Sample( void ) {

  std::cout << "Destructor called" << std::endl;
  return;
}

int   Sample::getFoo( void ) const {

  return this->_foo;
}

int   Sample::compare( Sample * other ) const {

  if (this->_foo < other->getFoo() )
    return -1;
  else if ( this->_foo > other->getfoo() )
    return 1;

  return 0;

}


// physically vs structurally

  Sample    instance1( 42 );
  Sample    instance2( 42 );

  //&instance1 == &instance1...

  // &instance1 != &instance2

  // instance1.compare(&instance1) == 0 => true

  // instance1.compare(&instance2) == 0 => true
