#07_encapsulation

// Sample.class.hpp

#ifndef SAMPLE_CLASS_H
# define SAMPLE_CLASS_H

class Sample {

public:

  int   publicFoo;

  Sample( void );
  ~Sample( void );

  void   publicBar( void ) const;

private:

  int   _privateFoo;

  void  _privateBar( void ) const;

};

#endif


// Sample.class.cpp

#include <iostream>
#include "Sample.class.hpp"

Sample::Sample( void ) {

  std::cout << "Constructor called" << std::endl;
  this->publicFoo = 0;
  std::cout << "this->publicFoo:  " << this->publicFoo << std::endl;

  this->_privateFoo = 0;
  std::cout << "this->_privateFoo:  " << this->_privateFoo << std::endl;


  this->publicBar();
  this->_privatebar();

  return;
}

Sample::~Sample( void ) {

  std::cout << "Destructor called" << std::endl;
  return;
}

void    Sample::publicBar( void ) const {

  std::cout << "Member function publicBar called" << std::endl;
  return;
}


void    Sample::_privateBar( void ) const {

  std::cout << "Member function _privateBar called" << std::endl;
  return;
}


// main.cpp

#include <iostream>
#include "Sample.class.hpp"

int   main( void ) {

  Sample    instance;

  instance.publicFoo = 42;
  std::cout << "instance.publicFoo: " << instance.publicFoo << std::endl;
  // instance._privateFoo = 42;
  // std::cout << "instance._privateFoo: " << instance._privateFoo << std::endl;

  instance.publicBar();
  // instance._privateBar();

  return 0;

}
